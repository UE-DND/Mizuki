---
import { Icon } from "astro-icon/components";
import { type NavBarLink, LinkPreset } from "../../types/config";
import { LinkPresets } from "../../constants/link-presets";
import { url } from "../../utils/url-utils";
import { navBarConfig } from "../../config";

interface Props {
	link: NavBarLink;
	class?: string;
}

const { link, class: className } = Astro.props;

// 转换子菜单中的LinkPreset为NavBarLink
const processedLink = {
	...link,
	children: link.children?.map((child: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof child === "number") {
			return LinkPresets[child];
		}
		return child;
	})
};

// 图标渲染配置
const iconsEnable = !!navBarConfig.icons?.enable;
const iconSet = navBarConfig.icons?.defaultSet ?? "material-symbols";
const iconSize = navBarConfig.icons?.size ?? 18;
function getIconName(i?: string) {
  if (!i) return null;
  return i.includes(":") ? i : `${iconSet}:${i}`;
}

const hasChildren = processedLink.children && processedLink.children.length > 0;

---

<div class:list={["dropdown-container", className]} data-dropdown>
	{hasChildren ? (
		<button 
			class="btn-plain scale-animation rounded-lg h-11 font-semibold text-base px-5 active:scale-95 dropdown-trigger"
			aria-expanded="false"
			aria-haspopup="true"
			data-dropdown-trigger
		>
			<div class="flex items-center">
				{iconsEnable && processedLink.icon && (
					<Icon name={getIconName(processedLink.icon)} style={`font-size: ${iconSize}px`} class="mr-2 -translate-y-[1px]" />
				)}
				<span>{processedLink.name}</span>
				<Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1.25rem] transition-transform duration-200 dropdown-arrow" />
			</div>
		</button>
		<div class="dropdown-menu" data-dropdown-menu>
			<div class="dropdown-content">
				{processedLink.children?.map((child) => (
					<a 
						href={child.external ? child.url : url(child.url)} 
						target={child.external ? "_blank" : null}
						class="dropdown-item"
						aria-label={child.name}
					>
						<div class="flex items-center">
							{iconsEnable && child.icon && (
								<Icon name={getIconName(child.icon)} style={`font-size: ${iconSize}px`} class="mr-2 -translate-y-[1px]" />
							)}
							<span>{child.name}</span>
						</div>
						{child.external && (
							<Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] text-black/25 dark:text-white/25" />
						)}
					</a>
				))}
			</div>
		</div>
	) : (
		<a 
			aria-label={processedLink.name} 
			href={processedLink.external ? processedLink.url : url(processedLink.url)} 
			target={processedLink.external ? "_blank" : null}
			class="btn-plain scale-animation rounded-lg h-11 font-semibold text-base px-5 active:scale-95"
		>
			<div class="flex items-center">
				{iconsEnable && processedLink.icon && (
					<Icon name={getIconName(processedLink.icon)} style={`font-size: ${iconSize}px`} class="mr-2 -translate-y-[1px]" />
				)}
				<span>{processedLink.name}</span>
				{processedLink.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]" />}
			</div>
		</a>
	)}
</div>

<style>
	.dropdown-container {
		@apply relative;
	}

	.dropdown-menu {
		@apply absolute left-0 opacity-0 invisible pointer-events-none transition-all duration-200 ease-out transform translate-y-[-8px] z-[100];
		top: calc(100% + 12px);
		/* 添加一个不可见的桥接区域，防止鼠标移动时菜单消失 */
	}
	
	.dropdown-menu::before {
		content: '';
		position: absolute;
		top: -12px;
		left: 0;
		right: 0;
		height: 16px;
		background: transparent;
	}

	.dropdown-container:hover .dropdown-menu,
	.dropdown-container:focus-within .dropdown-menu,
	.dropdown-menu:hover {
		@apply opacity-100 visible pointer-events-auto translate-y-0;
	}

	.dropdown-container:hover .dropdown-arrow,
	.dropdown-container:focus-within .dropdown-arrow {
		@apply rotate-180;
	}

	/* 基于点击的显隐控制：
	 * - [data-open="true"] 强制展开（非悬停也可见）
	 * - [data-open="false"] 强制收起（覆盖 :hover/:focus-within）
	 */
	.dropdown-container[data-open="true"] .dropdown-menu {
		@apply opacity-100 visible pointer-events-auto translate-y-0;
	}

	.dropdown-container[data-open="true"] .dropdown-arrow {
		@apply rotate-180;
	}

	.dropdown-container[data-open="false"] .dropdown-menu {
		@apply opacity-0 invisible pointer-events-none translate-y-[-8px];
	}

	.dropdown-container[data-open="false"] .dropdown-arrow {
		@apply rotate-0;
	}

	.dropdown-content {
		@apply rounded-[var(--radius-large)] p-2 min-w-[12rem];
		background: rgba(255, 255, 255, 0.95);
		border: 1px solid rgba(0, 0, 0, 0.06);
		backdrop-filter: blur(20px);
		box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
	}
	
	.dark .dropdown-content {
		background: rgba(30, 30, 35, 0.95);
		border: 1px solid rgba(255, 255, 255, 0.08);
		box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
	}

	.dropdown-item {
		@apply flex items-center justify-between px-3 py-2.5 rounded-lg transition-all duration-200 font-medium text-sm;
		color: rgba(0, 0, 0, 0.75);
	}
	
	.dark .dropdown-item {
		color: rgba(255, 255, 255, 0.8);
	}
	
	.dropdown-item:hover {
		background: var(--btn-plain-bg-hover);
		color: var(--primary);
		transform: translateY(-1px);
	}

	/* 移除首尾圆角样式，使用统一的圆角设计 */

	/* 移动端隐藏下拉菜单 */
	@media (max-width: 768px) {
		.dropdown-container {
			@apply hidden;
		}
	}
</style>

<script>
	// 键盘导航支持
	document.addEventListener('DOMContentLoaded', function() {
		const dropdowns = document.querySelectorAll('[data-dropdown]');
		
		dropdowns.forEach(dropdown => {
			const trigger = dropdown.querySelector('[data-dropdown-trigger]');
			const menu = dropdown.querySelector('[data-dropdown-menu]');
			const items = dropdown.querySelectorAll('.dropdown-item');
			
			if (!trigger || !menu) return;
			
			// 键盘事件处理
			trigger.addEventListener('keydown', function(e: KeyboardEvent) {
				if (e.key === 'Enter' || e.key === ' ') {
					e.preventDefault();
					toggleDropdown(dropdown, trigger, menu);
				} else if (e.key === 'ArrowDown') {
					e.preventDefault();
					openDropdown(dropdown, trigger, menu);
					if (items.length > 0) {
						(items[0] as HTMLElement).focus();
					}
				} else if (e.key === 'Escape') {
					closeDropdown(dropdown, trigger, menu);
					// 避免 :focus-within 导致再次显示
					(trigger as HTMLElement).blur();
				}
			});
			
			// 点击按钮切换（覆盖 :hover 展示）
			trigger.addEventListener('click', function(e) {
				e.preventDefault();
				const state = dropdown.getAttribute('data-open');
				if (state === 'true') {
					closeDropdown(dropdown, trigger, menu);
					// 关闭后移除焦点，避免 :focus-within 再次显示
					(trigger as HTMLElement).blur();
				} else if (state === 'false') {
					openDropdown(dropdown, trigger, menu);
				} else {
					// 当前可能因 :hover 可见 -> 置为关闭以覆盖 :hover
					closeDropdown(dropdown, trigger, menu);
					// 关闭后移除焦点
					(trigger as HTMLElement).blur();
				}
			});

			// 悬停再次进入时，若之前是强制关闭，则清理以恢复悬停逻辑
			dropdown.addEventListener('pointerenter', () => {
				if (dropdown.getAttribute('data-open') === 'false') {
					dropdown.removeAttribute('data-open');
				}
			});

			// 离开容器时，如果处于强制关闭，则清理该状态，恢复默认悬停
			dropdown.addEventListener('pointerleave', () => {
				if (dropdown.getAttribute('data-open') === 'false') {
					dropdown.removeAttribute('data-open');
				}
			});
			
			// 菜单项键盘导航
			items.forEach((item, index) => {
				item.addEventListener('keydown', function(e: KeyboardEvent) {
					if (e.key === 'ArrowDown') {
						e.preventDefault();
						const nextIndex = (index + 1) % items.length;
						(items[nextIndex] as HTMLElement).focus();
					} else if (e.key === 'ArrowUp') {
						e.preventDefault();
						const prevIndex = (index - 1 + items.length) % items.length;
						(items[prevIndex] as HTMLElement).focus();
					} else if (e.key === 'Escape') {
						closeDropdown(dropdown, trigger, menu);
						(trigger as HTMLElement).focus();
					}
				});
			});
		});
		
		// 点击外部关闭下拉菜单
		document.addEventListener('click', function(e: MouseEvent) {
			dropdowns.forEach(dropdown => {
				if (!dropdown.contains(e.target as Node)) {
					const trigger = dropdown.querySelector('[data-dropdown-trigger]');
					const menu = dropdown.querySelector('[data-dropdown-menu]');
					if (trigger && menu) {
						closeDropdown(dropdown, trigger, menu);
						// 移除焦点，避免 :focus-within 造成菜单常驻
						(trigger as HTMLElement).blur();
						// 重置为默认悬停逻辑，避免下次悬停被“强制关闭”拦截
						dropdown.removeAttribute('data-open');
					}
				}
			});
		});
	});
	
	function toggleDropdown(dropdown, trigger, menu) {
		const state = dropdown.getAttribute('data-open');
		if (state === 'true') {
			closeDropdown(dropdown, trigger, menu);
		} else if (state === 'false') {
			openDropdown(dropdown, trigger, menu);
		} else {
			// 无显式状态（可能因悬停而显示），切换为关闭
			closeDropdown(dropdown, trigger, menu);
		}
	}
	
	function openDropdown(dropdown, trigger, menu) {
		trigger.setAttribute('aria-expanded', 'true');
		dropdown.setAttribute('data-open', 'true');
	}
	
	function closeDropdown(dropdown, trigger, menu) {
		trigger.setAttribute('aria-expanded', 'false');
		dropdown.setAttribute('data-open', 'false');
	}
</script>