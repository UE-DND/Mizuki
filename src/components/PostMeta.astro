---
import { Icon } from "astro-icon/components";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
} = Astro.props;
const className = Astro.props.class;
const homePaths = ["/", ...Array.from({ length: 20 }, (_, i) => `/${i + 1}/`)];
const isHome = homePaths.includes(Astro.url.pathname);
---

<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon"
            >
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || "未分类"}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon"
        >
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">无标签</div>}
        </div>
    </div>
        <!-- 访问量（首页不显示，使用自建统计 /api/stats） -->
        {!isHome && (
          <>
            <div class="flex items-center">
              <div class="meta-icon">
                <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
              </div>
              <span>浏览量：<span id="post-stats-pv">加载中...</span></span>，
              <span>访问次数：<span id="post-stats-uv">加载中...</span></span>
            </div>

            <script is:inline>
              function normalizePath(p){ if(!p) return '/'; if(p.length>1 && p.endsWith('/')) return p.slice(0,-1); return p; }
              function getVisitorId(){ try{ const k='mizuki_vid'; let id=localStorage.getItem(k); if(!id){ id=(crypto?.randomUUID?.()||Math.random().toString(36).slice(2))+'-'+Date.now(); localStorage.setItem(k,id);} return id; }catch{ return 'anon'; } }
              async function updateStats(){
                const pvEl=document.getElementById('post-stats-pv');
                const uvEl=document.getElementById('post-stats-uv');
                if(!pvEl||!uvEl) return;
                pvEl.textContent='加载中...'; uvEl.textContent='加载中...';
                try{
                  const path=normalizePath(window.location.pathname);
                  const visitorId=getVisitorId();
                  const res=await fetch('/api/stats/',{ method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({ path, visitorId }) });
                  const data=await res.json();
                  if(res.ok){ pvEl.textContent=String(data?.pv ?? '0'); uvEl.textContent=String(data?.uv ?? '0'); }
                  else { pvEl.textContent='N/A'; uvEl.textContent='N/A'; }
                }catch(e){ pvEl.textContent='Error'; uvEl.textContent='Error'; }
              }
              function setup(){ updateStats(); }
              document.addEventListener('DOMContentLoaded', setup);
              function setupSwup(){ if(window.swup&&window.swup.hooks){ window.swup.hooks.on('content:replace', ()=> setTimeout(updateStats, 50)); } }
              if(window.swup) setupSwup(); else document.addEventListener('swup:enable', setupSwup);
              document.addEventListener('mizuki:page:loaded', ()=> setTimeout(updateStats, 50));
            </script>
          </>
        )}
</div>
